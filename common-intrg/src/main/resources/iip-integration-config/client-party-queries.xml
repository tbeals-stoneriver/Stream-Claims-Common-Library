<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<iipda:queries xmlns:iipda="http://www.fiserv.com/isd/iip/core/data/query/file" category="client" subcategory="client">

	<iipda:rdbms accessId="client.party.roles.vendor.retrieveVendorPartyIds">
 		<iipda:content>
 		SELECT
 			PR.PARTY_ID
	        FROM
	        	PARTY_ROLE_VENDOR PRV
	        JOIN PARTY_ROLE PR ON PR.PARTY_ROLE_ID = PRV.PARTY_ROLE_ID
	        AND PR.EFF_DTM &lt;= :curdatetime
	        AND (PR.END_DTM IS NULL OR PR.END_DTM &gt; :curdatetime)
	        AND PR.PARTY_ID IN (:partyIds)
		</iipda:content>
 		<iipda:description>
 			Retrieves the party IDs that have the vendor role associated to the party. 
 		</iipda:description>
 	</iipda:rdbms>
 	
	<iipda:rdbms accessId="client.party.set.dob">
 		<iipda:content>
 		UPDATE 
 			PARTY_PERSON
	        SET PARTY_PERS_BRTH_DT = :dobDate
	        WHERE PARTY_ID IN ( SELECT PARTY_ID FROM PARTY_PERSON_NAME WHERE PARTY_PERS_NM_NM_LST_UPCS_SRCH = :lastName
	        AND PARTY_PERS_NM_NM_FST_UPCS_SRCH = :firstName AND PERS_NM_TYP_CD = 'lgl_nm')
			AND PARTY_PERS_BRTH_DT IS NULL
		</iipda:content>
 		<iipda:description>
 			Set Date of Birth to the specified Date
 		</iipda:description>
 	</iipda:rdbms>
 	
	<iipda:rdbms accessId="client.party.reset.dob">
 		<iipda:content>
 		UPDATE 
 			PARTY_PERSON
	        SET PARTY_PERS_BRTH_DT = NULL
	        WHERE PARTY_ID IN ( SELECT PARTY_ID FROM PARTY_PERSON_NAME WHERE PARTY_PERS_NM_NM_LST_UPCS_SRCH = :lastName
	        AND PARTY_PERS_NM_NM_FST_UPCS_SRCH = :firstName AND PERS_NM_TYP_CD = 'lgl_nm')
			AND PARTY_PERS_BRTH_DT = :dobDate
		</iipda:content>
 		<iipda:description>
 			Reset Date of Birth to the specified Date
 		</iipda:description>
 	</iipda:rdbms> 	 	 	
   
    <iipda:rdbms accessId="client.events.retrieveVendorPartiesForDate">
         <iipda:content>
               SELECT DISTINCT PARTY.PARTY_ID recordId, PARTY.PARTY_TYP_CD partyTypeCode
               FROM
                  PARTY PARTY
               INNER JOIN EVENT_UPDATE_DATA EUD
                  ON PARTY.PARTY_ID = EUD.AGRE_ID
               INNER JOIN PARTY_ROLE PR
                  ON PR.PARTY_ID = EUD.AGRE_ID
               INNER JOIN PARTY_ROLE_VENDOR PRV
                  ON PRV.PARTY_ROLE_ID = PR.PARTY_ROLE_ID
               WHERE EUD.EVNT_UPDT_DATA_DTM &gt;= :startDate
                 AND EUD.EVNT_UPDT_DATA_DTM &lt;= :endDate
                 AND EUD.EVNT_TYP_CD IN ('party_addpers', 'party_updpers', 'party_addorg', 'party_updorg')
                 AND PR.PARTY_ROLE_TYP_CD IN ('vend')
         </iipda:content>
         <iipda:description>
            Retrieves the Party ID and Party Type Code for the given date range.
         </iipda:description>
    </iipda:rdbms> 
 
 	<iipda:rdbms accessId="client.party.search.main" query-builder-ref="client.party.querybuilder.partySearch">
		<iipda:sql-fragments>

			<iipda:sql-fragment>
				<iipda:fragment-id>begin</iipda:fragment-id>
				<iipda:fragment-sql>
					WITH PARTY_RESULTS (
						PARTY_ID, PARTY_NM_ID, PARTY_NM_TYP_CD, PARTY_TYP_CD,
						PARTY_DISP_NM, NM_DISP_ORDER, PARTY_FST_NM, 
						PARTY_MID_NM, PARTY_LST_NM) Dialect.getAsKeyword() (
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>personOrBothSelect</iipda:fragment-id>
				<iipda:fragment-sql>
					SELECT
						DISTINCT PN.PARTY_ID,
						PN.PARTY_PERS_NM_ID PARTY_NM_ID,
						PN.PERS_NM_TYP_CD NM_TYP_CD,
						'pers' PARTY_TYP_CD,
						PN.PARTY_PERS_NM_NM_DISP_DRV PARTY_DISP_NM,
						CASE PN.PERS_NM_TYP_CD WHEN 'lgl_nm' THEN 1 ELSE 2 END NM_DISP_ORDER,
						PN.PARTY_PERS_NM_NM_FST PARTY_FST_NM,
						PN.PARTY_PERS_NM_NM_MID PARTY_MID_NM,
						PN.PARTY_PERS_NM_NM_LST PARTY_LST_NM
					FROM
						PARTY_PERSON_NAME PN
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
			<iipda:fragment-id>organizationOrBothSelect</iipda:fragment-id>
				<iipda:fragment-sql>
					SELECT
						DISTINCT PN.PARTY_ID,
						PN.PARTY_ORG_NM_ID PARTY_NM_ID,
						PN.ORG_NM_TYP_CD NM_TYP_CD,
						'org' PARTY_TYP_CD,
						PN.PARTY_ORG_NM_NM PARTY_DISP_NM,
						CASE PN.ORG_NM_TYP_CD WHEN 'lgl_nm' THEN 1 WHEN 'pri_dba_nm' THEN 2 WHEN 'sec_dba_nm' THEN 3 ELSE 4 END NM_DISP_ORDER,
						'' PARTY_FST_NM,
						'' PARTY_MID_NM,
						'' PARTY_LST_NM
					FROM
						PARTY_ORGANIZATION_NAME PN
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
			<iipda:fragment-id>otherSelect</iipda:fragment-id>
				<iipda:fragment-sql>
					SELECT
						DISTINCT PN.PARTY_ID,
						-1 PARTY_NM_ID,
						'' NM_TYP_CD,
						PN.PARTY_TYP_CD,
						'' PARTY_DISP_NM,
						1 NM_DISP_ORDER,
						'' PARTY_FST_NM,
						'' PARTY_MID_NM,
						'' PARTY_LST_NM
					FROM
						PARTY PN
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
			<iipda:fragment-id>mid</iipda:fragment-id>
				<iipda:fragment-sql>
					)
					, NAME_SEARCH_DISPLAY_DEPTH Dialect.getAsKeyword() (
						SELECT PARTY_ID, MIN(NM_DISP_ORDER) Dialect.getAsKeyword() MIN_DISP_ORDER
						FROM PARTY_RESULTS GROUP BY PARTY_ID)
					, REMOVE_MULTIPLE_NAME Dialect.getAsKeyword() (
						SELECT PARTY_ID, MIN(PARTY_NM_ID) Dialect.getAsKeyword() MIN_PARTY_NM_ID
						FROM PARTY_RESULTS GROUP BY PARTY_ID, PARTY_TYP_CD,PARTY_NM_TYP_CD)
					, PARTY_ID_LIST Dialect.getAsKeyword() (
						SELECT DISTINCT PARTY_ID FROM PARTY_RESULTS)
					SELECT 
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
			<iipda:fragment-id>selectTOPExpression</iipda:fragment-id>
				<iipda:fragment-sql>
					Dialect.getSelectTOPExpression(:maxSearchResults)
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
			<iipda:fragment-id>mid2</iipda:fragment-id>
				<iipda:fragment-sql>
					 PNR.PARTY_ID partyId
						, PNR.PARTY_TYP_CD partyTypeCode
				</iipda:fragment-sql>
			</iipda:sql-fragment>			

			<iipda:sql-fragment>
			<iipda:fragment-id>end</iipda:fragment-id>
				<iipda:fragment-sql>
					FROM
						PARTY_RESULTS PNR
						JOIN NAME_SEARCH_DISPLAY_DEPTH NSDD
							ON PNR.PARTY_ID = NSDD.PARTY_ID
							AND PNR.NM_DISP_ORDER = NSDD.MIN_DISP_ORDER
						JOIN REMOVE_MULTIPLE_NAME RMN
							ON PNR.PARTY_ID = RMN.PARTY_ID
							AND PNR.PARTY_NM_ID = RMN.MIN_PARTY_NM_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<!-- optional includes -->
			<iipda:sql-fragment>
				<iipda:fragment-id>includeAddressSelect</iipda:fragment-id>
				<iipda:fragment-sql>
						, TEMP_ADDRESS1.PARTY_ADDR_ID addressId
						, TEMP_ADDRESS1.PARTY_ADDR_LN1_TXT addressLine1
						, TEMP_ADDRESS1.PARTY_ADDR_LN2_TXT addressLine2
						, TEMP_ADDRESS1.PARTY_ADDR_CITY_NM addressCity
						, TEMP_ADDRESS1.PSTL_SERV_RGN_ID addressRegionId
						, TEMP_ADDRESS1.PARTY_ADDR_PSTL_CD addressZipcode
						, TEMP_ADDRESS1.PSTL_SERV_RGN_NM addressState
						, TEMP_ADDRESS1.CNTRY_NM addressCountry
						, TEMP_ADDRESS1.CNTRY_CD addressCountryCode
						, TEMP_ADDRESS1.PSTL_SERV_RGN_ABRV addressStateCode
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<!--  used when resultAddressAgreementType is null or empty -->
			<iipda:sql-fragment>
				<iipda:fragment-id>includeAddressGenericFrom</iipda:fragment-id>
				<iipda:fragment-sql>
						LEFT OUTER JOIN (
							SELECT
								PA.PARTY_ID,
								PA.PARTY_ADDR_ID,
								PA.PSTL_SERV_RGN_ID,
								PA.PARTY_ADDR_PSTL_CD,
								PA.PARTY_ADDR_LN1_TXT,
								PA.PARTY_ADDR_LN2_TXT,
								PA.PARTY_ADDR_CITY_NM,
								PSR.PSTL_SERV_RGN_NM,
								PSR.PSTL_SERV_RGN_ABRV,
								CCD.CNTRY_NM,
								CCD.CNTRY_CD
							FROM
								PARTY_ID_LIST PIL
								JOIN PARTY_ADDRESS PA ON PIL.PARTY_ID = PA.PARTY_ID
								JOIN PARTY_ADDRESS_USAGE PAU ON PA.PARTY_ADDR_ID=PAU.PARTY_ADDR_ID
								<!-- JOIN PARTY_ADDRESS_USAGE_DT_RNG_DRV PAUDRD
									ON PAU.PARTY_ADDR_USG_ID=PAUDRD.PARTY_ADDR_USG_ID -->
								JOIN USAGE_TYPE_USAGE_CATEGORY_XREF UTUCX
									ON PAU.AGRE_TYP_CD=UTUCX.AGRE_TYP_CD
									AND PAU.USG_TYP_CD=UTUCX.USG_TYP_CD
								JOIN POSTAL_SERVICE_REGION_CD PSR
									ON PA.PSTL_SERV_RGN_ID = PSR.PSTL_SERV_RGN_ID
								JOIN POSTAL_SERVICE_REGION_TYPE_CD PSRTC
									ON PSR.PSTL_SERV_RGN_TYP_CD = PSRTC.PSTL_SERV_RGN_TYP_CD
									JOIN COUNTRY_CD CCD
									ON PSRTC.CNTRY_CD=CCD.CNTRY_CD
							WHERE
								PAU.USG_TYP_CD = 'mail_addr'
								AND PAU.PARTY_ADDR_USG_EFF_DT &lt;= :curdatetime
								AND (PAU.PARTY_ADDR_USG_END_DT &gt; :curdatetime
									OR PAU.PARTY_ADDR_USG_END_DT IS NULL)
								AND(
								(:currentMonth BETWEEN PAU.MM_ID_USG_STRT_MM AND PAU.MM_ID_USG_END_MM) OR
								(PAU.MM_ID_USG_STRT_MM =  :currentMonth AND PAU.PARTY_ADDR_USG_USG_STRT_DD &lt;= :currentDay) OR
								(PAU.MM_ID_USG_END_MM =  :currentMonth AND PAU.PARTY_ADDR_USG_USG_END_DD &gt;= :currentDay)
								 )
								AND UTUCX.USG_TYP_USG_CTG_DISP_ORD = (
									SELECT
										MIN(UTUCX1.USG_TYP_USG_CTG_DISP_ORD)
									FROM
										USAGE_TYPE_USAGE_CATEGORY_XREF UTUCX1
										JOIN PARTY_ADDRESS_USAGE PAU1
											ON PAU1.AGRE_TYP_CD = UTUCX1.AGRE_TYP_CD
										JOIN PARTY_ID_LIST PIL1 ON PIL1.PARTY_ID = PAU1.PARTY_ID_DRV
									WHERE
										PAU.PARTY_ID_DRV=PAU1.PARTY_ID_DRV
										AND PAU1.USG_TYP_CD=UTUCX1.USG_TYP_CD
										AND PAU1.PARTY_ADDR_USG_EFF_DT &lt;= :curdatetime
										AND (PAU1.PARTY_ADDR_USG_END_DT &gt; :curdatetime
											OR PAU1.PARTY_ADDR_USG_END_DT IS NULL)
									)
							) TEMP_ADDRESS1 ON TEMP_ADDRESS1.PARTY_ID = PNR.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<!--  used when resultAddressAgreementType has a value -->
			<iipda:sql-fragment>
				<iipda:fragment-id>includeAddressByAgreementTypeFrom</iipda:fragment-id>
				<iipda:fragment-sql>
						LEFT OUTER JOIN (
							SELECT
								PA.PARTY_ID,
								PA.PARTY_ADDR_ID,
								PA.PSTL_SERV_RGN_ID,
								PA.PARTY_ADDR_PSTL_CD,
								PA.PARTY_ADDR_LN1_TXT,
								PA.PARTY_ADDR_LN2_TXT,
								PA.PARTY_ADDR_CITY_NM,
								PSR.PSTL_SERV_RGN_NM,
								PSR.PSTL_SERV_RGN_ABRV,
								CCD.CNTRY_NM,
								CCD.CNTRY_CD
							FROM
								PARTY_ID_LIST PIL
								JOIN PARTY_ADDRESS PA ON PIL.PARTY_ID = PA.PARTY_ID
								JOIN PARTY_ADDRESS_USAGE PAU ON PA.PARTY_ADDR_ID=PAU.PARTY_ADDR_ID
								<!-- JOIN PARTY_ADDRESS_USAGE_DT_RNG_DRV PAUDRD
									ON PAU.PARTY_ADDR_USG_ID=PAUDRD.PARTY_ADDR_USG_ID -->
								JOIN POSTAL_SERVICE_REGION_CD PSR
									ON PA.PSTL_SERV_RGN_ID = PSR.PSTL_SERV_RGN_ID
								JOIN POSTAL_SERVICE_REGION_TYPE_CD PSRTC
									ON PSR.PSTL_SERV_RGN_TYP_CD = PSRTC.PSTL_SERV_RGN_TYP_CD
								JOIN COUNTRY_CD CCD
									ON PSRTC.CNTRY_CD=CCD.CNTRY_CD
									
							WHERE
								PAU.USG_TYP_CD = 'mail_addr'
								AND PAU.AGRE_TYP_CD = :resultAddressAgreementType
								AND PAU.PARTY_ADDR_USG_EFF_DT &lt;= :curdatetime
								AND (PAU.PARTY_ADDR_USG_END_DT &gt; :curdatetime
									OR PAU.PARTY_ADDR_USG_END_DT IS NULL)
								AND(
								(:currentMonth BETWEEN PAU.MM_ID_USG_STRT_MM AND PAU.MM_ID_USG_END_MM) OR
								(PAU.MM_ID_USG_STRT_MM =  :currentMonth AND PAU.PARTY_ADDR_USG_USG_STRT_DD &lt;= :currentDay) OR
								(PAU.MM_ID_USG_END_MM =  :currentMonth AND PAU.PARTY_ADDR_USG_USG_END_DD &gt;= :currentDay)
								)
							) TEMP_ADDRESS1 ON TEMP_ADDRESS1.PARTY_ID = PNR.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<!--  begin part of search By Location Address -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressBegin</iipda:fragment-id>
				<iipda:fragment-sql>
						LEFT OUTER JOIN (
							SELECT
								PA.PARTY_ID,
								PA.PARTY_ADDR_ID,
								PA.PSTL_SERV_RGN_ID,
								PA.PARTY_ADDR_PSTL_CD,
								PA.PARTY_ADDR_LN1_TXT,
								PA.PARTY_ADDR_LN2_TXT,
								PA.PARTY_ADDR_CITY_NM,
								PSR.PSTL_SERV_RGN_NM,
								PSR.PSTL_SERV_RGN_ABRV,
								CCD.CNTRY_NM,
								CCD.CNTRY_CD
							FROM
								PARTY_ID_LIST PIL
								JOIN PARTY_ADDRESS PA ON PIL.PARTY_ID = PA.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			
			<!--  end part of search By Location Address -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressEnd</iipda:fragment-id>
				<iipda:fragment-sql>
							) TEMP_ADDRESS1 ON TEMP_ADDRESS1.PARTY_ID = PNR.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<!--  begin part of search By Location Address By PostalRegionBegin-->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByStateBegin</iipda:fragment-id>
				<iipda:fragment-sql>
						JOIN POSTAL_SERVICE_REGION_CD PSR
									ON PA.PSTL_SERV_RGN_ID = PSR.PSTL_SERV_RGN_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>
				<!--  end part of search By Location Address By PostalRegion end-->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByStateEnd</iipda:fragment-id>
				<iipda:fragment-sql>
						JOIN POSTAL_SERVICE_REGION_TYPE_CD PSRTC
									ON PSR.PSTL_SERV_RGN_TYP_CD = PSRTC.PSTL_SERV_RGN_TYP_CD
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			<!--  begin part of search By Location Address By Country Code-->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByCountryBegin</iipda:fragment-id>
				<iipda:fragment-sql>
						JOIN COUNTRY_CD CCD
									ON PSRTC.CNTRY_CD=CCD.CNTRY_CD
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			
			<!--   begin part of search By Location Address by Usage -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressUsageBegin</iipda:fragment-id>
				<iipda:fragment-sql>
							JOIN (
							SELECT
								PA.PARTY_ID,
								PA.PARTY_ADDR_ID,
								PA.PSTL_SERV_RGN_ID,
								PA.PARTY_ADDR_PSTL_CD,
								PA.PARTY_ADDR_LN1_TXT,
								PA.PARTY_ADDR_LN2_TXT,
								PA.PARTY_ADDR_CITY_NM,
								PSR.PSTL_SERV_RGN_NM,
								PSR.PSTL_SERV_RGN_ABRV,
								CCD.CNTRY_NM,
								CCD.CNTRY_CD
							FROM
								PARTY_ID_LIST PIL
								JOIN PARTY_ADDRESS PA ON PIL.PARTY_ID = PA.PARTY_ID
								
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<!--   end part of search By Location Address by Usage -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressUsageEnd</iipda:fragment-id>
				<iipda:fragment-sql>
							
								JOIN PARTY_ADDRESS_USAGE PAU ON PA.PARTY_ADDR_ID=PAU.PARTY_ADDR_ID
								JOIN USAGE_TYPE_USAGE_CATEGORY_XREF UTUCX
									ON PAU.AGRE_TYP_CD=UTUCX.AGRE_TYP_CD
									AND PAU.USG_TYP_CD=UTUCX.USG_TYP_CD
							WHERE
								PAU.USG_TYP_CD = :partyAddressUsageFilter
								AND PAU.PARTY_ADDR_USG_EFF_DT &lt;= :curdatetime
								AND (PAU.PARTY_ADDR_USG_END_DT &gt; :curdatetime
									OR PAU.PARTY_ADDR_USG_END_DT IS NULL)
								AND UTUCX.USG_TYP_USG_CTG_DISP_ORD = (
									SELECT
										MIN(UTUCX1.USG_TYP_USG_CTG_DISP_ORD)
									FROM
										USAGE_TYPE_USAGE_CATEGORY_XREF UTUCX1
										JOIN PARTY_ADDRESS_USAGE PAU1
											ON PAU1.AGRE_TYP_CD = UTUCX1.AGRE_TYP_CD
										JOIN PARTY_ID_LIST PIL1 ON PIL1.PARTY_ID = PAU1.PARTY_ID_DRV
									WHERE
										PAU.PARTY_ID_DRV=PAU1.PARTY_ID_DRV
										AND PAU1.USG_TYP_CD=UTUCX1.USG_TYP_CD
										AND PAU1.PARTY_ADDR_USG_EFF_DT &lt;= :curdatetime
										AND (PAU1.PARTY_ADDR_USG_END_DT &gt; :curdatetime
											OR PAU1.PARTY_ADDR_USG_END_DT IS NULL)
									)
							) TEMP_ADDRESS1 ON TEMP_ADDRESS1.PARTY_ID = PNR.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<!--   location search with city -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByCity</iipda:fragment-id>
				<iipda:fragment-sql>
					AND PA.PARTY_ADDR_CITY_NM_UPCS_SRCH LIKE :addressCityFilter
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<!--   location search with Address Line 1 -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByAddress1</iipda:fragment-id>
				<iipda:fragment-sql>
					AND PA.PARTY_ADDR_LN1_TXT_UPCS_SRCH LIKE :addressLine1Filter
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<!--   location search with Address Line 2 -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByAddress2</iipda:fragment-id>
				<iipda:fragment-sql>
					AND PA.PARTY_ADDR_LN2_TXT_UPCS_SRCH LIKE :addressLine2Filter
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			<!--   location search with postal code -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByPostalCode</iipda:fragment-id>
				<iipda:fragment-sql>
					AND PA.PARTY_ADDR_PSTL_CD LIKE :addressZipcodeFilter
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			<!--   location search with county -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByCounty</iipda:fragment-id>
				<iipda:fragment-sql>AND PA.PARTY_ADDR_SUBD_NM_UPCS_SRCH =:addressCountyFilter</iipda:fragment-sql>
			</iipda:sql-fragment>
			<!--   location search with state -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByState</iipda:fragment-id>
				<iipda:fragment-sql>AND PSR.PSTL_SERV_RGN_ABRV = :addressStateFilter</iipda:fragment-sql>
			</iipda:sql-fragment>
			<!--   location search with country -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByCountry</iipda:fragment-id>
				<iipda:fragment-sql>AND CCD.CNTRY_CD = :addressCountryFilter</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<!-- location name order by -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByNameOrderBy</iipda:fragment-id>
				<iipda:fragment-sql>NAME</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<!-- location taxidentifer order by -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByTaxidentifierOrderBy</iipda:fragment-id>
				<iipda:fragment-sql>TAXIDENTIFIER</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<!-- location address order by -->
			<iipda:sql-fragment>
				<iipda:fragment-id>searchByLocationAddressByAddressOrderBy</iipda:fragment-id>
				<iipda:fragment-sql>ADDRESSZIPCODE</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>includeTaxSelect</iipda:fragment-id>
				<iipda:fragment-sql>
						, PTI.PARTY_TAX_ID_TAX_ID_NO taxIdentifier
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>includeTaxFrom</iipda:fragment-id>
				<iipda:fragment-sql>
						LEFT OUTER JOIN PARTY_TAX_IDENTIFIER PTI
							ON PNR.PARTY_ID = PTI.PARTY_ID
							AND PTI.PARTY_TAX_ID_EFF_DTM &lt;= :curdatetime
							AND (PTI.PARTY_TAX_ID_END_DTM &gt; :curdatetime OR PTI.PARTY_TAX_ID_END_DTM IS NULL)
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			<!--  New SQL Added for Party Blocks -->
			<iipda:sql-fragment>
				<iipda:fragment-id>includePartyBlockSelect</iipda:fragment-id>
				<iipda:fragment-sql>
						, CASE WHEN PB_CUST_BLK_JOIN.BLOCK_COUNT &gt; 0 THEN 'y' ELSE 'n' END Dialect.getAsKeyword() blockExists
				</iipda:fragment-sql>
			</iipda:sql-fragment>			
			
			<iipda:sql-fragment>
				<iipda:fragment-id>includePartyBlockFrom</iipda:fragment-id>
				<iipda:fragment-sql>
						LEFT OUTER JOIN (SELECT PBL.PARTY_ID, COUNT(1) BLOCK_COUNT 
						FROM PARTY_BLOCK PBL JOIN PARTY_ID_LIST PIDL ON PIDL.PARTY_ID =  PBL.PARTY_ID 
						WHERE PBL.PARTY_BLK_EFF_DTM &lt;= :curdatetime AND (PBL.PARTY_BLK_END_DTM &gt; :curdatetime 
						OR PBL.PARTY_BLK_END_DTM IS NULL) GROUP BY PBL.PARTY_ID) PB_CUST_BLK_JOIN ON PNR.PARTY_ID = PB_CUST_BLK_JOIN.PARTY_ID 
				</iipda:fragment-sql>
			</iipda:sql-fragment>
	<!-- 	
			<iipda:sql-fragment>
				<iipda:fragment-id>includePartyVendorBlockSelect</iipda:fragment-id>
				<iipda:fragment-sql>
						, PB_VEND_BLK_JOIN.PARTY_BLK_TYP_CD vendorBlockType
				</iipda:fragment-sql>
			</iipda:sql-fragment>			
			
			<iipda:sql-fragment>
				<iipda:fragment-id>includePartyVendorBlockJoinClause</iipda:fragment-id>
				<iipda:fragment-sql>
					 LEFT OUTER JOIN PARTY_BLOCK PB_VEND_BLK_JOIN 
					 ON PNR.PARTY_ID = PB_VEND_BLK_JOIN.PARTY_ID
			         AND PB_VEND_BLK_JOIN.PARTY_BLK_TYP_CD = 'vend_blk'
			         AND PB_VEND_BLK_JOIN.PARTY_BLK_EFF_DTM &lt;= :curdatetime
			         AND (PB_VEND_BLK_JOIN.PARTY_BLK_END_DTM &gt; :curdatetime OR PB_VEND_BLK_JOIN.PARTY_BLK_END_DTM IS NULL)					 
				</iipda:fragment-sql>
			</iipda:sql-fragment>
		-->
			<iipda:sql-fragment>
				<iipda:fragment-id>includeNameSelect</iipda:fragment-id>
				<iipda:fragment-sql>
						, CASE PNR.PARTY_TYP_CD WHEN 'org' THEN PON1.PARTY_ORG_NM_NM ELSE PPN1.PARTY_PERS_NM_NM_DISP_DRV END name
						, CASE PNR.NM_DISP_ORDER WHEN 1 THEN '' ELSE PNR.PARTY_DISP_NM END nameOther
						, CASE PNR.PARTY_TYP_CD WHEN 'pers' THEN PPN1.PARTY_PERS_NM_NM_FST ELSE '' END firstName
						, CASE PNR.PARTY_TYP_CD WHEN 'pers' THEN PPN1.PARTY_PERS_NM_NM_LST ELSE '' END lastName
						, CASE PNR.PARTY_TYP_CD WHEN 'pers' THEN PPN1.PARTY_PERS_NM_NM_MID ELSE '' END middleName
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>includeNameFrom</iipda:fragment-id>
				<iipda:fragment-sql>
						LEFT OUTER JOIN PARTY_PERSON_NAME PPN1
							ON PNR.PARTY_ID = PPN1.PARTY_ID
							AND PPN1.PERS_NM_TYP_CD = 'lgl_nm'
							AND PPN1.PARTY_PERS_NM_EFF_DT &lt;= :curdatetime
							AND (PPN1.PARTY_PERS_NM_END_DT &gt; :curdatetime OR PPN1.PARTY_PERS_NM_END_DT IS NULL)
						LEFT OUTER JOIN PARTY_ORGANIZATION_NAME PON1
							ON PNR.PARTY_ID = PON1.PARTY_ID
							AND PON1.ORG_NM_TYP_CD = 'lgl_nm'
							AND PON1.PARTY_ORG_NM_EFF_DTM &lt;= :curdatetime
							AND (PON1.PARTY_ORG_NM_END_DTM &gt; :curdatetime OR PON1.PARTY_ORG_NM_END_DTM IS NULL)
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>includeDBANameSelect</iipda:fragment-id>
				<iipda:fragment-sql>
						, CASE PNR.PARTY_TYP_CD WHEN 'org' THEN (SELECT PARTY_ORG_NM_NM FROM PARTY_ORGANIZATION_NAME 
						  WHERE PARTY_ID = PNR.PARTY_ID AND ORG_NM_TYP_CD = 'pri_dba_nm' 
						  AND PARTY_ORG_NM_EFF_DTM &lt;= :curdatetime
						  AND (PARTY_ORG_NM_END_DTM &gt; :curdatetime OR PARTY_ORG_NM_END_DTM IS NULL)) ELSE NULL END primaryDBAName
						, CASE PNR.PARTY_TYP_CD WHEN 'org' THEN (SELECT PARTY_ORG_NM_NM FROM PARTY_ORGANIZATION_NAME 
						  WHERE PARTY_ID = PNR.PARTY_ID AND ORG_NM_TYP_CD = 'sec_dba_nm' 
						  AND PARTY_ORG_NM_EFF_DTM &lt;= :curdatetime
						  AND (PARTY_ORG_NM_END_DTM &gt; :curdatetime OR PARTY_ORG_NM_END_DTM IS NULL) 
						  Dialect.getFetchRowExpression(1, AUDT_USER_CREA_DTM DESC)) ELSE NULL END secondaryDBAName
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
		
			<iipda:sql-fragment>
				<iipda:fragment-id>includeVendorSelect</iipda:fragment-id>
				<iipda:fragment-sql>
						, TEMP_VENDOR.VEND_TYP_CD vendorTypeCode
						, TEMP_VENDOR.VEND_SERV_STS_CD vendorStatus
						, TEMP_VENDOR.VEND_CTG_CD vendorCategoryCode
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>includeVendorFrom</iipda:fragment-id>
				<iipda:fragment-sql>
						LEFT OUTER JOIN ( SELECT DISTINCT PROLE.PARTY_ID, VTYPE.VEND_TYP_CD, VTYPE.VEND_CTG_CD, VSTATUS.VEND_SERV_STS_CD FROM PARTY_ROLE PROLE, PARTY_ROLE_VENDOR_TYPE VTYPE, 
						PARTY_ROLE_VENDOR_TYP_SERV_STS VSTATUS 
						WHERE PROLE.PARTY_ROLE_ID = VTYPE.PARTY_ROLE_ID 
						AND VTYPE.PRVT_ID = VSTATUS.PRVT_ID
						AND VSTATUS.PRVTSS_EFF_DT &lt;= :curdatetime AND (VSTATUS.PRVTSS_END_DT &gt; :curdatetime OR VSTATUS.PRVTSS_END_DT IS NULL)
						<!-- AND VSTATUS.VEND_SERV_STS_CD != 'exp' -->
						) TEMP_VENDOR ON TEMP_VENDOR.PARTY_ID = PNR.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>includeProfileSelect</iipda:fragment-id>
				<iipda:fragment-sql>
						, CASE WHEN PRFL_STMT.PSRP_RSPNS_VAL_TXT IS NULL THEN NULL ELSE PRFL_STMT.PRFL_STMT_DESC END Dialect.getAsKeyword() profileName
						, PRFL_STMT.PSRP_RSPNS_VAL_TXT profileValue
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>includeProfileFrom</iipda:fragment-id>
				<iipda:fragment-sql>
						LEFT OUTER JOIN ( SELECT PARTY_ID, PRFL_STMT_DESC, PSRP_RSPNS_VAL_TXT FROM 
						PRFL_STMT_RSPNS_PARTY PRFL, PROFILE_STATEMENT_CD PRSC WHERE PRFL.PRFL_STMT_ID = PRSC.PRFL_STMT_ID 
						AND PRSC.PRFL_STMT_DESC = :includeProfileName ) PRFL_STMT ON PRFL_STMT.PARTY_ID = PNR.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>			
			
			<iipda:sql-fragment>
				<iipda:fragment-id>includeLienSelect</iipda:fragment-id>
				<iipda:fragment-sql>
						, PLR.PLRT_CD lienRestrictionCode
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>includeLienFrom</iipda:fragment-id>
				<iipda:fragment-sql>
						LEFT OUTER JOIN PARTY_LIEN_RESTRICTION PLR ON PLR.PARTY_ID = PNR.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>includeCommunicationSelect</iipda:fragment-id>
				<iipda:fragment-sql>
						,COMM.BUSINESS_PHONE businessPhone, COMM.HOME_PHONE homePhone, COMM.CELL_PHONE cellPhone, COMM.BUSINESS_EMAIL businessEmail, COMM.PERSONAL_EMAIL personalEmail
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>includeCommunicationFrom</iipda:fragment-id>
				<iipda:fragment-sql>
					LEFT OUTER JOIN ( SELECT pic.PARTY_ID, max(CASE WHEN pic.USG_TYP_CD = 'busn_phn' THEN pic.PARTY_INTRN_CHNL_PHN_NO ELSE NULL END) BUSINESS_PHONE,  
					max(CASE WHEN pic.USG_TYP_CD = 'hm_phn' THEN pic.PARTY_INTRN_CHNL_PHN_NO ELSE NULL END)  HOME_PHONE, 
					max(CASE WHEN pic.USG_TYP_CD = 'cell_phn' THEN pic.PARTY_INTRN_CHNL_PHN_NO ELSE NULL END)  CELL_PHONE, 
					max(CASE WHEN pic.USG_TYP_CD = 'busn_email' THEN pic.PARTY_INTRN_CHNL_OTHR_VAL_TXT ELSE NULL END)  BUSINESS_EMAIL, 
					max(CASE WHEN pic.USG_TYP_CD = 'prsn_email' THEN pic.PARTY_INTRN_CHNL_OTHR_VAL_TXT ELSE NULL END)   PERSONAL_EMAIL
					FROM PARTY_ID_LIST pil2, PARTY_INTERACTION_CHANNEL pic, PARTY_INTRN_CHNL_AGRE_TYP pat
					WHERE pil2.PARTY_ID = pic.PARTY_ID AND pic.PARTY_INTRN_CHNL_ID = pat.PARTY_INTRN_CHNL_ID AND pat.AGRE_TYP_CD = 'party' AND pat.PICAT_PRI_USG_IND = 'y' 
					AND pat.EFF_DTM  &lt;= :curdatetime AND (pat.END_DTM IS NULL OR pat.END_DTM &gt; :curdatetime) GROUP BY pic.PARTY_ID) COMM ON COMM.PARTY_ID = PNR.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>
													
		<!--  # END # -->		
			<iipda:sql-fragment>
				<iipda:fragment-id>includeRoutingNumberSelect</iipda:fragment-id>
				<iipda:fragment-sql>
						, PRFI.PARTY_ROLE_FNCL_INST_ROUT_NO routingNumber
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>includeRoutingNumberFrom</iipda:fragment-id>
				<iipda:fragment-sql>
						JOIN PARTY_ROLE PR ON PNR.PARTY_ID = PR.PARTY_ID
						JOIN PARTY_ROLE_FINANCIAL_INST PRFI ON PR.PARTY_ROLE_ID = PRFI.PARTY_ROLE_ID
						AND     PR.EFF_DTM  &lt; :curdatetime
		                AND
				        (
				           PR.END_DTM   &gt; :curdatetime
				           OR     PR.END_DTM IS NULL
				         )
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<!--  JOINs -->
			<iipda:sql-fragment>
				<iipda:fragment-id>taxIdentifierJoin</iipda:fragment-id>
				<iipda:fragment-sql>
					JOIN PARTY_TAX_IDENTIFIER PTI ON PN.PARTY_ID = PTI.PARTY_ID
					AND PTI.PARTY_TAX_ID_EFF_DTM &lt;= CURRENT_TIMESTAMP
					AND (PTI.PARTY_TAX_ID_END_DTM &gt; CURRENT_TIMESTAMP OR PTI.PARTY_TAX_ID_END_DTM IS NULL)					
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>partyIdentifierJoin</iipda:fragment-id>
				<iipda:fragment-sql>
					JOIN PARTY_IDENTIFIER ON PN.PARTY_ID = PARTY_IDENTIFIER.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>partyPersonJoin</iipda:fragment-id>
				<iipda:fragment-sql>
					JOIN PARTY_PERSON ON PN.PARTY_ID = PARTY_PERSON.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>partyJoin</iipda:fragment-id>
				<iipda:fragment-sql>
					 LEFT OUTER JOIN PARTY on PN.PARTY_ID = PARTY.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>partyAddressJoin</iipda:fragment-id>
				<iipda:fragment-sql>
					JOIN PARTY_ADDRESS ON PN.PARTY_ID = PARTY_ADDRESS.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
                        <iipda:fragment-id>partyAddressPostalRegionJoin</iipda:fragment-id>
                        <iipda:fragment-sql>
                              JOIN POSTAL_SERVICE_REGION_CD ON PARTY_ADDRESS.PSTL_SERV_RGN_ID = POSTAL_SERVICE_REGION_CD.PSTL_SERV_RGN_ID
                              JOIN POSTAL_SERVICE_REGION_TYPE_CD ON POSTAL_SERVICE_REGION_CD.PSTL_SERV_RGN_TYP_CD = POSTAL_SERVICE_REGION_TYPE_CD.PSTL_SERV_RGN_TYP_CD
                        </iipda:fragment-sql>
            </iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>interactionChannelJoin</iipda:fragment-id>
				<iipda:fragment-sql>
					JOIN PARTY_INTERACTION_CHANNEL ON ( PN.PARTY_ID = PARTY_INTERACTION_CHANNEL.PARTY_ID AND PARTY_INTERACTION_CHANNEL.DEL_IND = 'n')
					JOIN USAGE_TYPE_CD ON PARTY_INTERACTION_CHANNEL.USG_TYP_CD = USAGE_TYPE_CD.USG_TYP_CD
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>rolesJoin</iipda:fragment-id>
				<iipda:fragment-sql>
					JOIN PARTY_ROLE PR ON PN.PARTY_ID = PR.PARTY_ID
					AND     PR.EFF_DTM  &lt; :curdatetime
	                AND
			        (
			           PR.END_DTM   &gt; :curdatetime
			           OR     PR.END_DTM IS NULL
			         )
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>routingNumberJoin</iipda:fragment-id>
				<iipda:fragment-sql>
					JOIN PARTY_ROLE_FINANCIAL_INST PRFI ON PR.PARTY_ROLE_ID = PRFI.PARTY_ROLE_ID
					AND     PR.EFF_DTM  &lt; :curdatetime
	                AND
			        (
			           PR.END_DTM   &gt; :curdatetime
			           OR     PR.END_DTM IS NULL
			         )
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>vendorTypeJoin</iipda:fragment-id>
				<iipda:fragment-sql>
					JOIN PARTY_ROLE_VENDOR PRV ON PR.PARTY_ROLE_ID = PRV.PARTY_ROLE_ID 
                    LEFT OUTER JOIN PARTY_ROLE_VENDOR_TYPE PRVT ON PRV.PARTY_ROLE_ID = PRVT.PARTY_ROLE_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>vendorSpecialtyTypeJoin</iipda:fragment-id>
				<iipda:fragment-sql>
					JOIN PARTY_ROLE_VENDOR_TYPE_SPL PRVTS ON PRVTS.PRVT_ID = PRVT.PRVT_ID   
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>vendorPartOfBodyJoin</iipda:fragment-id>
				<iipda:fragment-sql>
					JOIN PARTY_ROLE_VENDOR_TYPE_POB PRVTP ON PRVTP.PRVT_ID = PRVT.PRVT_ID 
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>membershipAssociationJoin</iipda:fragment-id>
				<iipda:fragment-sql>
                    JOIN PARTY_ROLE_MBRSHP_ASSOC_DTL PRMD ON PR.PARTY_ROLE_ID = PRMD.PARTY_ROLE_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>languageJoin</iipda:fragment-id>
				<iipda:fragment-sql>
                    JOIN PARTY_LANGUAGE PL ON PN.PARTY_ID = PL.PARTY_ID
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>vendorImeIndicatorJoin</iipda:fragment-id>
				<iipda:fragment-sql>
					LEFT OUTER JOIN PARTY_ROLE_VENDOR_TYPE_SPL PRVTS ON PRVTS.PRVT_ID = PRVT.PRVT_ID 
                    LEFT OUTER JOIN PARTY_ROLE_VENDOR_TYPE_POB PRVTP ON PRVTP.PRVT_ID = PRVT.PRVT_ID 
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<!--  filters -->
			<iipda:sql-fragment>
				<iipda:fragment-id>partyIdFilter</iipda:fragment-id>
				<iipda:fragment-sql>
					PN.PARTY_ID IN (:partyIdsFilter)
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>partyEventFilter</iipda:fragment-id>
				<iipda:fragment-sql>
					PN.PARTY_ID IN (SELECT PARTY.PARTY_ID  FROM
                  PARTY PARTY
               INNER JOIN EVENT_DATA ED
                  ON PARTY.PARTY_ID = ED.EVNT_DATA_CNTX_ID
               INNER JOIN PARTY_ROLE PR
                  ON PR.PARTY_ID = ED.EVNT_DATA_CNTX_ID
               INNER JOIN PARTY_ROLE_VENDOR PRV
                  ON PRV.PARTY_ROLE_ID = PR.PARTY_ROLE_ID
               WHERE ED.AGRE_TYP_CD = 'party'
                 AND ED.AGRE_SUBTYP_CD IS NULL
                 AND ED.EVNT_DATA_DTM &gt;= :eventStartDate
                 AND ED.EVNT_DATA_DTM &lt;= :eventEndDate
                 AND ED.EVNT_TYP_CD IN (:partyEventsFilter))
				</iipda:fragment-sql>
			</iipda:sql-fragment>			

			<iipda:sql-fragment>
				<iipda:fragment-id>personNameFilter</iipda:fragment-id>
				<iipda:fragment-sql>
					PN.PARTY_PERS_NM_NM_UPCS_SRCH LIKE :partyNameFilter
					AND PN.PARTY_PERS_NM_EFF_DT &lt;= :curdatetime
					AND (PN.PARTY_PERS_NM_END_DT &gt; :curdatetime OR PN.PARTY_PERS_NM_END_DT IS NULL)
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>personFirstNameFilter</iipda:fragment-id>
				<iipda:fragment-sql>
					PN.PARTY_PERS_NM_NM_FST_UPCS_SRCH LIKE :firstNameFilter
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>personDateFilter</iipda:fragment-id>
				<iipda:fragment-sql>
					PN.PARTY_PERS_NM_EFF_DT &lt;= :curdatetime
					AND (PN.PARTY_PERS_NM_END_DT &gt; :curdatetime OR PN.PARTY_PERS_NM_END_DT IS NULL)
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>personLastNameFilter</iipda:fragment-id>
				<iipda:fragment-sql>
					PN.PARTY_PERS_NM_NM_LST_UPCS_SRCH LIKE :lastNameFilter
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>personMiddleNameFilter</iipda:fragment-id>
				<iipda:fragment-sql>
					PN.PARTY_PERS_NM_NM_MID_UPCS_SRCH LIKE :middleNameFilter					
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>organizationNameFilter</iipda:fragment-id>
				<iipda:fragment-sql>
					PN.PARTY_ORG_NM_NM_UPCS_SRCH LIKE :partyNameFilter
					AND PN.PARTY_ORG_NM_EFF_DTM &lt;= :curdatetime
					AND (PN.PARTY_ORG_NM_END_DTM &gt; :curdatetime OR PN.PARTY_ORG_NM_END_DTM IS NULL)
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>partyTypeFilter</iipda:fragment-id>
				<iipda:fragment-sql>PN.PARTY_TYP_CD = :partyTypeFilter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>addressLine1Filter</iipda:fragment-id>
				<iipda:fragment-sql>PARTY_ADDRESS.PARTY_ADDR_LN1_TXT_UPCS_SRCH LIKE :addressLine1Filter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>addressLine2Filter</iipda:fragment-id>
				<iipda:fragment-sql>PARTY_ADDRESS.PARTY_ADDR_LN2_TXT_UPCS_SRCH LIKE :addressLine2Filter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>addressCityFilter</iipda:fragment-id>
				<iipda:fragment-sql>PARTY_ADDRESS.PARTY_ADDR_CITY_NM_UPCS_SRCH LIKE :addressCityFilter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>addressCountyFilter</iipda:fragment-id>
				<iipda:fragment-sql>PARTY_ADDRESS.PARTY_ADDR_SUBD_NM_UPCS_SRCH LIKE :addressCountyFilter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>addressStateFilter</iipda:fragment-id>
				<iipda:fragment-sql>POSTAL_SERVICE_REGION_CD.PSTL_SERV_RGN_ABRV = :addressStateFilter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>addressCountryFilter</iipda:fragment-id>
				<iipda:fragment-sql>POSTAL_SERVICE_REGION_TYPE_CD.CNTRY_CD = :addressCountryFilter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>addressZipcodeFilter</iipda:fragment-id>
				<iipda:fragment-sql>PARTY_ADDRESS.PARTY_ADDR_PSTL_CD LIKE :addressZipcodeFilter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>partyNumberFilter</iipda:fragment-id>
				<iipda:fragment-sql>PARTY.PARTY_PARTY_NO LIKE :partyNumberFilter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>partyIdentifierTypeFilter</iipda:fragment-id>
				<iipda:fragment-sql>PARTY_IDENTIFIER.PARTY_ID_TYP_CD = :partyIdentifierTypeFilter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>partyIdentifierFilter</iipda:fragment-id>
				<iipda:fragment-sql>PARTY_IDENTIFIER.PARTY_ID_NO LIKE :partyIdentifierFilter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>taxIdentifierFilter</iipda:fragment-id>
				<iipda:fragment-sql>PTI.PARTY_TAX_ID_TAX_ID_NO LIKE :taxIdentifierFilter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>personDateOfBirthFilter</iipda:fragment-id>
				<iipda:fragment-sql>PARTY_PERSON.PARTY_PERS_BRTH_DT = :dateOfBirthFilter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>communicationTypeFilter</iipda:fragment-id>
				<iipda:fragment-sql>USAGE_TYPE_CD.COMM_METH_CD = :communicationTypeFilter</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>communicationFilter</iipda:fragment-id>
				<iipda:fragment-sql>
				 PARTY_INTERACTION_CHANNEL.PARTY_INTRN_CHNL_VAL_UPCS_SRCH LIKE :communicationFilter
				</iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>rolesFilter</iipda:fragment-id>
				<iipda:fragment-sql>PR.PARTY_ROLE_TYP_CD IN (:rolesFilter)</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>routingNumberFilter</iipda:fragment-id>
				<iipda:fragment-sql>PRFI.PARTY_ROLE_FNCL_INST_ROUT_NO =:routingNumberFilter</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>vendorTypeFilter</iipda:fragment-id>
				<iipda:fragment-sql>PRVT.VEND_TYP_CD LIKE :vendorTypeFilter
									
				</iipda:fragment-sql>
			</iipda:sql-fragment>	
			
			<iipda:sql-fragment>
				<iipda:fragment-id>vendorCategoryFilter</iipda:fragment-id>
				<iipda:fragment-sql>PRVT.VEND_CTG_CD LIKE :vendorCategoryFilter
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>vendorSpecialtyTypeFilter</iipda:fragment-id>
				<iipda:fragment-sql>PRVTS.VEND_SPL_CD LIKE :specialtyType
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>vendorSpecialtyImeIndicatorFilter</iipda:fragment-id>
				<iipda:fragment-sql>PRVTS.PRVTS_IME_IND ='y' 
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>vendorPartOfBodyFilter</iipda:fragment-id>
				<iipda:fragment-sql>PRVTP.POB_CD LIKE :partOfBody
				</iipda:fragment-sql>
			</iipda:sql-fragment>	
			
			<iipda:sql-fragment>
				<iipda:fragment-id>vendorPartOfBodyImeIndicatorFilter</iipda:fragment-id>
				<iipda:fragment-sql>PRVTP.PRVTP_IME_IND ='y' 
				</iipda:fragment-sql>
			</iipda:sql-fragment>	
			
			<iipda:sql-fragment>
				<iipda:fragment-id>vendorImeIndicatorFilter</iipda:fragment-id>
				<iipda:fragment-sql>( PRVTS.PRVTS_IME_IND ='y' OR  PRVTP.PRVTP_IME_IND ='y' )
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>vendorSpecPobImeOptionalFilter</iipda:fragment-id>
				<iipda:fragment-sql>((PRVTS.PRVTS_IME_IND ='y' OR  PRVTP.PRVTP_IME_IND ='y') AND (PRVTP.POB_CD LIKE :partOfBody AND PRVTS.VEND_SPL_CD LIKE :specialtyType))
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>membershipIdFilter</iipda:fragment-id>
				<iipda:fragment-sql>PRMD.PRMAD_NO LIKE :membershipIdFilter</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>includePrimaryMembership</iipda:fragment-id>
				<iipda:fragment-sql>PRMD.PRMAD_PRI_IND = 'y'</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>recommendedVendor</iipda:fragment-id>
				<iipda:fragment-sql>PRV.PARTY_ROLE_VEND_RECM_IND = 'y' </iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>language</iipda:fragment-id>
				<iipda:fragment-sql>PL.LANG_CD = :languageFilter </iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>gender</iipda:fragment-id>
				<iipda:fragment-sql>PARTY_PERSON.GNDR_CD = :genderFilter </iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<iipda:sql-fragment>
				<iipda:fragment-id>partyDuplicateFilter</iipda:fragment-id>
				<iipda:fragment-sql>
					PARTY.PARTY_DUP_IND = 'n' 
						AND NOT EXISTS (
							SELECT PARTY_AUTH_ID 
								FROM PARTY_AUTHORIZATION PA 
									JOIN PARTY_AUTHORIZATION_STATUS_CD PAS 
										ON PA.PARTY_AUTH_STS_CD = PAS.PARTY_AUTH_STS_CD
	  								JOIN PARTY_AUTH_CLS_AUTH_STS_XREF PACA 
	  									ON PAS.PARTY_AUTH_STS_CD = PACA.PARTY_AUTH_STS_CD
	   							WHERE PN.PARTY_ID = PA.PARTY_ID 
	   								AND PACA.PARTY_AUTH_CLS_CD = 'dup')
				</iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<!--  misc -->
			<iipda:sql-fragment>
				<iipda:fragment-id>union</iipda:fragment-id>
				<iipda:fragment-sql> UNION ALL </iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>and</iipda:fragment-id>
				<iipda:fragment-sql> AND </iipda:fragment-sql>
			</iipda:sql-fragment>

			<iipda:sql-fragment>
				<iipda:fragment-id>where</iipda:fragment-id>
				<iipda:fragment-sql> WHERE </iipda:fragment-sql>
			</iipda:sql-fragment>
			
			<!--   row count -->
			<iipda:sql-fragment>
				<iipda:fragment-id>fetchFirstNRows</iipda:fragment-id>
				<iipda:fragment-sql> Dialect.getFetchRowExpression(:maxSearchResults, null) </iipda:fragment-sql>
			</iipda:sql-fragment>			

		</iipda:sql-fragments>
			<iipda:description>
				Dynamic query fragments for party search
			</iipda:description>
	</iipda:rdbms>
	
	<!--  11/05/2014 @GR - New SQL added to fetch party blocks -->
	<iipda:rdbms accessId="client.party.retrievePartyBlocks">
		<iipda:content>
			SELECT			PARTY_BLK_TYP_CD blockTypeCode
    		FROM 			PARTY_BLOCK 
							WHERE PARTY_BLK_EFF_DTM &lt;= :curdatetime
					 		AND (PARTY_BLK_END_DTM &gt; :curdatetime OR PARTY_BLK_END_DTM IS NULL)
							AND PARTY_ID = :partyId
</iipda:content>
		<iipda:description>
			Retrieve Block Types for a given party
		</iipda:description>
	</iipda:rdbms>
	
 		
</iipda:queries>

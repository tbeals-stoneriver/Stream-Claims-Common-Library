<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd   	
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">

	
	<bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<!-- The userDetailsServiceImpl is defined using annotation, it gets the 
			data from the database please do not override in XML as the DAO is injected 
			using annotation too, if you override then the DAO refrerence will be null, 
			or you need to inject the dao in XML too -->
		<property name="userDetailsService" ref="userDetailsServiceImpl" />
	</bean>
	
	<!-- ********** This section makes LDAP authentication available ********* -->
	<bean id="contextSource" class="org.springframework.ldap.core.support.LdapContextSource">
		<property name="url" value="${ldap_server_url}" />
		<!-- domain contexts are located in base so that they can be available 
			to authentication -->
		<property name="base" value="${ldap_base_context}" />
		<!-- user/password logging into LDAP -->
		<property name="userDn" value="${ldap_admin_user_dn}" />
		<property name="password" value="${ldap_admin_user_password}" />
		<!-- Pooled is required for paging functionality, however, different pooling 
			methods can be used -->
		<property name="pooled" value="true" />
	</bean>

	<bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
		<constructor-arg ref="contextSource" />
	</bean>

	<bean id="ldapUserDetailsContextMapper"
		class="com.client.iip.integration.core.security.LDAPUserDetailsContextMapper">
		<property name="userDetailsService" ref="userDetailsServiceImpl" />
	</bean>

	<!-- ldap authentication provider requires password to SHA encoded and to 
		be stored in a field called 'userPassword' or 'userpassword' -->
	<bean id="ldapAuthProvider"
		class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
		<!-- Search filter used to locate person objects for authentication -->
		<constructor-arg>
			<bean
				class="org.springframework.security.ldap.authentication.BindAuthenticator">
				<constructor-arg ref="contextSource" />
				<property name="userDnPatterns">
					<list>
						<value>${ldap_user_dn_pattern}</value>
					</list>
				</property>
			</bean>
		</constructor-arg>
		<!-- used for loading roles from LDAP -->
		<constructor-arg>
			<bean
				class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
				<constructor-arg ref="contextSource" />
				<constructor-arg value="ou=Groups" />
				<property name="groupRoleAttribute" value="ou" />
			</bean>
		</constructor-arg>
		<property name="userDetailsContextMapper" ref="ldapUserDetailsContextMapper" />
	</bean>

	<!-- ********** end LDAP ********** -->

	<util:list id="authenticationManager.providers">
		<ref bean="${stream_security_provider}" />
	</util:list>

    	<!-- lookup the user, no password check -->
	<bean id="interfaceDaoAuthenticationProvider"
		class="com.client.iip.integration.core.security.ClientDaoAuthenticationProvider">
		<!-- The userDetailsServiceImpl is defined using annotation, it gets the 
			data from the database please do not override in XML as the DAO is injected 
			using annotaion too, if you override then the DAO refrerence will be null, 
			or you need to inject the dao in XML too -->
		<property name="userDetailsService" ref="userDetailsServiceImpl" />
	</bean>

	<!-- LDAP authentication provider using custom authenticator to verify username -->
	<bean id="interfaceLdapAuthProvider"
		class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
		<!-- Search filter used to locate person objects for authentication -->
		<constructor-arg>
			<bean
				class="com.client.iip.integration.core.security.ClientLDAPAuthenticator">
				<constructor-arg ref="contextSource" />
				<property name="userDnPatterns">
					<list>
						<value>${ldap_user_dn_pattern}</value>
					</list>
				</property>
			</bean>
		</constructor-arg>
		<!-- used for loading roles from LDAP -->
		<constructor-arg>
			<bean
				class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
				<constructor-arg ref="contextSource" />
				<constructor-arg value="ou=Groups" />
				<property name="groupRoleAttribute" value="ou" />
			</bean>
		</constructor-arg>
		<property name="userDetailsContextMapper" ref="ldapUserDetailsContextMapper" />
	</bean>

    <bean id="interfaceAuthenticationManager"
		class="org.springframework.security.authentication.ProviderManager">
		<property name="providers"><ref bean="${interface_security_provider}"/></property>
	</bean>

</beans>
